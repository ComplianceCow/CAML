# this dockerfile establishes a single build/run environment for
# all the elements of CAML source distribution. For simplicity this
# is a single environment for /src stuff.  

# go being the lingua in question we start with a golang image so 
# supporting dev work in place is easy
FROM golang as prepit

# build a working image by installing git tooling and cloning the repo
RUN apt-get update
RUN apt-get install -y git
WORKDIR /go/src
# $gitrepo needs to be passed in as a --build-arg 
# or set via docker-compose.caml_dev.yaml
ARG gitrepo
RUN git clone $gitrepo


# at this point a developer can attach vscode to the dev image and work with it directly
# to do so:
#       - attach vscode to the running image
#       - follow the prompts to install their dev environment stuff (for building and debugging)
#       - when you first try to commit changes it will walk you through obtaining authorization tokens
#         at the vscode level to enable a push.
# TODO: explore gitlens extention 
# TODO: explore ensuring CLI git is configured automatically. because git is installed as per the above it works but you'll be forced to put your authorization token into the container which is not recommended. Better to just use the vscode model if thats an option.

FROM prepit as buildit 
WORKDIR /go/src/CAML/src/main
RUN go mod download
RUN go mod tidy -compat=1.17 && \
    go get -d -v 
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o camldataservice .

WORKDIR /go/src