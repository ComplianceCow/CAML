package main

import "time"

type Measure_Data_Type int
type Measure_Aggregate_Type int
type Measure_Aggregate_Format int

const (
	CAM_Version   string = "0.0.1"
	CAM_Namespace string = "/v1/alpha1"
)

const (
	Numeric_Int Measure_Data_Type = iota
	Numerica_Float
)

const (
	Percentage Measure_Aggregate_Type = iota
	Max
	Min
)

const (
	Undefined Measure_Aggregate_Format = iota
	Hour
	Day
	Week
	Month
	Year
)

type CAM_Context struct {
	CCM_Control_ID  string `json:"control_id,omitempty"`
	CAM_ID          string `json:"cam_id,omitempty"`
	CAM_Description string `json:"cam_description,omitempty"`
	CAM_Metrics
	CAM_SLO_Recommendations []CAM_SLO_Recommendation `json:"cam_slo_recommendations,omitempty"`
	CAM_Tags                map[string]string        `json:"cam_tags,omitempty"`
}

type CAM_Metrics struct {
	Measures []CAM_Measure `json:"measures,omitempty"`
	// Metrics_Formula: Example, "{{A}}/{{B}}*100" where {{A}} and {{B}} corresponds to the Metrics Measures
	Metrics_Formula           string    `json:"metrics_formula,omitempty"`
	Metrics_Period_Start_Date time.Time `json:"metrics_period_start_date,omitempty"`
	Metrics_Period_End_Date   time.Time `json:"metrics_period_end_date,omitempty"`
	// Metrics_Frequency in CRON format
	Metrics_Frequency string `json:"metrics_frequency,omitempty"`
}

type CAM_Measure struct {
	Measure_Name        string `json:"measure_name,omitempty"`
	Measure_Alias       string `json:"measure_alias,omitempty"`
	Measure_Description string `json:"measure_description,omitempty"`
	// Refer Measure_Data_type
	Measure_Data_Type        Measure_Data_Type        `json:"measure_data_type,omitempty"`
	Measure_Aggregate_Type   Measure_Aggregate_Type   `json:"measure_aggregate_type,omitempty"`
	Measure_Aggregate_Format Measure_Aggregate_Format `json:"measure_aggregate_format,omitempty"`
	Measure_Tags             map[string]string        `json:"measure_tags,omitempty"`
}

type CAM_SLO_Recommendation struct {
	SLO_Condition             string `json:"slo_condition,omitempty"`
	SLO_Condition_Description string `json:"slo_condition_description,omitempty"`

	/* SLO_Data_Type:  Refer Measure_Data_type. This is an enumerated variable and can be one of the following
	numeric_int - To indicate that the SLO output is a signed number
	numeric_float - To indicate that the SLO output can take decimal values
	*/
	SLO_Data_Type Measure_Data_Type `json:"slo_data_type,omitempty"`

	/* SLO_Aggregate_Type:  Refer Measure_Aggregate_type. This is an enumerated variable and can be one of the following
	percentage - To indicate that the SLO_Type is a percentage
	max - To indicate that the SLO_Type is a MAX value of
	min - To indicate that the SLO_Type is a MIN value of
	*/
	SLO_Aggregate_Type Measure_Aggregate_Type `json:"slo_aggregate_type,omitempty"`

	/* SLO_Aggregate_Format: Refer Measure_Aggregate_Format. This is an enumerated variable and can be one of the following
	Undefined - Not applicable. In the case of %
	Hour, Day, Week, Month, Year
	*/
	SLO_Aggregate_Format Measure_Aggregate_Format `json:"slo_aggregate_format,omitempty"`

	// SLO_Range values will be strings that will be cast at runtime into appropriate data types
	// format: 90d, 1y, 20h etc.
	SLO_Range_Min string `json:"slo_range_min,omitempty"`
	SLO_Range_Max string `json:"slo_range_max,omitempty"`
}

type CAM_Source struct {
	Source_Engine_Name string `json:"source_engine_name,omitempty"`
	Source_Engine_Type string `json:"source_engine_type,omitempty"`
	// Source_Engine_Token: Can we use a JWT token to guarantee the integrity of the measures
	Source_Engine_Token string `json:"source_engine_token,omitempty"`
}

type CAM_Measure_Runtime struct {
	*CAM_Context
	CAM_Measure
	CAM_Measure_Source *CAM_Source `json:"measure_source,omitempty"`
	// CAM_Measure_Source_ID: GUID value generated by the source engine for the measure. This may be validated by the consumer
	CAM_Measure_Source_ID         string               `json:"measure_id,omitempty"`
	CAM_Measure_Period_Start_Date *time.Time           `json:"measure_start_dt,omitempty"`
	CAM_Measure_Period_End_Date   *time.Time           `json:"measure_end_dt,omitempty"`
	CAM_Measure_Scope             *CAM_Scope           `json:"measure_scope,omitempty"`
	CAM_Measure_Value             string               `json:"measure_value,omitempty"`
	CAM_Measure_Tags              map[string]string    `json:"measure_tags,omitempty"`
	CAM_Measure_Report_DTM        *time.Time           `json:"measure_dtm,omitempty"`
	Previous_Measure              *CAM_Measure_Runtime `json:"-"`
}

type CAM_Metrics_Runtime struct {
	Metrics_Source            *CAM_Source           `json:"metrics_source,omitempty"`
	Metrics_Source_ID         string                `json:"metrics_id,omitempty"`
	Metrics_Period_Start_Date *time.Time            `json:"metrics_period_start_date,omitempty"`
	Metrics_Period_End_Date   *time.Time            `json:"metrics_period_end_date,omitempty"`
	Metrics_Scope             *CAM_Scope            `json:"metrics_scope,omitempty"`
	Metrics_Value             string                `json:"metrics_value,omitempty"`
	Measures                  []CAM_Measure_Runtime `json:"measures,omitempty"`
	Metrics_Tags              map[string]string     `json:"metrics_tags,omitempty"`
	Metrics_Report_DTM        *time.Time            `json:"metrics_dtm,omitempty"`
	Previous_Metrics          *CAM_Metrics_Runtime  `json:"-"`
}

type CAM_Scope struct {
	// TBD
}
